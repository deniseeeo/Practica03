
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 03 01:50:10 CST 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 03 01:50:10 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\025\003\000\002\027" +
    "\004\000\002\027\003\000\002\030\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\007\005" +
    "\000\002\014\005\000\002\014\004\000\002\014\006\000" +
    "\002\014\010\000\002\011\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\004\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\020\005\000\002\005" +
    "\011\000\002\005\015\000\002\004\013\000\002\015\006" +
    "\000\002\016\003\000\002\016\004\000\002\006\011\000" +
    "\002\010\020\000\002\012\014\000\002\021\003\000\002" +
    "\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\024\014\004\015\025\042\017\043\023\046" +
    "\013\052\012\054\006\057\026\061\022\001\002\000\032" +
    "\002\ufffb\014\ufffb\015\ufffb\017\ufffb\042\ufffb\043\ufffb\046" +
    "\ufffb\052\ufffb\054\ufffb\057\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\032\002\ufffe\014\004\015\025\017\ufffe\042\017\043" +
    "\023\046\013\052\012\054\006\057\026\061\022\062\ufffe" +
    "\001\002\000\004\016\166\001\002\000\032\002\ufff8\014" +
    "\ufff8\015\ufff8\017\ufff8\042\ufff8\043\ufff8\046\ufff8\052\ufff8" +
    "\054\ufff8\057\ufff8\061\ufff8\062\ufff8\001\002\000\032\002" +
    "\ufffa\014\ufffa\015\ufffa\017\ufffa\042\ufffa\043\ufffa\046\ufffa" +
    "\052\ufffa\054\ufffa\057\ufffa\061\ufffa\062\ufffa\001\002\000" +
    "\004\002\165\001\002\000\004\013\147\001\002\000\004" +
    "\016\135\001\002\000\032\002\ufff3\014\ufff3\015\ufff3\017" +
    "\ufff3\042\ufff3\043\ufff3\046\ufff3\052\ufff3\054\ufff3\057\ufff3" +
    "\061\ufff3\062\ufff3\001\002\000\032\002\ufff5\014\ufff5\015" +
    "\ufff5\017\ufff5\042\ufff5\043\ufff5\046\ufff5\052\ufff5\054\ufff5" +
    "\057\ufff5\061\ufff5\062\ufff5\001\002\000\032\002\ufff6\014" +
    "\ufff6\015\ufff6\017\ufff6\042\ufff6\043\ufff6\046\ufff6\052\ufff6" +
    "\054\ufff6\057\ufff6\061\ufff6\062\ufff6\001\002\000\004\013" +
    "\114\001\002\000\032\002\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\042\ufff4\043\ufff4\046\ufff4\052\ufff4\054\ufff4\057\ufff4\061" +
    "\ufff4\062\ufff4\001\002\000\004\002\000\001\002\000\004" +
    "\013\101\001\002\000\010\014\075\016\074\045\073\001" +
    "\002\000\032\002\ufff9\014\ufff9\015\ufff9\017\ufff9\042\ufff9" +
    "\043\ufff9\046\ufff9\052\ufff9\054\ufff9\057\ufff9\061\ufff9\062" +
    "\ufff9\001\002\000\032\002\ufffc\014\ufffc\015\ufffc\017\ufffc" +
    "\042\ufffc\043\ufffc\046\ufffc\052\ufffc\054\ufffc\057\ufffc\061" +
    "\ufffc\062\ufffc\001\002\000\004\016\030\001\002\000\032" +
    "\002\ufff7\014\ufff7\015\ufff7\017\ufff7\042\ufff7\043\ufff7\046" +
    "\ufff7\052\ufff7\054\ufff7\057\ufff7\061\ufff7\062\ufff7\001\002" +
    "\000\004\042\032\001\002\000\004\017\041\001\002\000" +
    "\004\013\033\001\002\000\010\012\035\013\034\014\037" +
    "\001\002\000\032\002\ufff0\014\ufff0\015\ufff0\017\ufff0\042" +
    "\ufff0\043\ufff0\046\ufff0\052\ufff0\054\ufff0\057\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\032\002\ufff1\014\ufff1\015\ufff1\017" +
    "\ufff1\042\ufff1\043\ufff1\046\ufff1\052\ufff1\054\ufff1\057\ufff1" +
    "\061\ufff1\062\ufff1\001\002\000\032\002\uffef\014\uffef\015" +
    "\uffef\017\uffef\042\uffef\043\uffef\046\uffef\052\uffef\054\uffef" +
    "\057\uffef\061\uffef\062\uffef\001\002\000\004\013\040\001" +
    "\002\000\032\002\ufff2\014\ufff2\015\ufff2\017\ufff2\042\ufff2" +
    "\043\ufff2\046\ufff2\052\ufff2\054\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\001\002\000\004\016\042\001\002\000\006\012\043" +
    "\014\046\001\002\000\042\006\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001" +
    "\002\000\024\024\061\025\065\026\060\027\064\030\067" +
    "\036\063\037\071\040\062\041\066\001\002\000\004\017" +
    "\050\001\002\000\004\013\047\001\002\000\042\006\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\001\002\000\004\016\051\001\002\000" +
    "\004\060\052\001\002\000\004\013\053\001\002\000\004" +
    "\017\054\001\002\000\004\016\055\001\002\000\024\014" +
    "\004\015\025\042\017\043\023\046\013\052\012\054\006" +
    "\057\026\061\022\001\002\000\004\017\057\001\002\000" +
    "\032\002\uffd1\014\uffd1\015\uffd1\017\uffd1\042\uffd1\043\uffd1" +
    "\046\uffd1\052\uffd1\054\uffd1\057\uffd1\061\uffd1\062\uffd1\001" +
    "\002\000\006\012\uffde\014\uffde\001\002\000\006\012\uffe0" +
    "\014\uffe0\001\002\000\006\012\uffdb\014\uffdb\001\002\000" +
    "\006\012\uffdd\014\uffdd\001\002\000\006\012\uffdf\014\uffdf" +
    "\001\002\000\006\012\uffe1\014\uffe1\001\002\000\006\012" +
    "\uffda\014\uffda\001\002\000\006\012\uffe2\014\uffe2\001\002" +
    "\000\006\012\043\014\046\001\002\000\006\012\uffdc\014" +
    "\uffdc\001\002\000\004\017\uffd9\001\002\000\032\002\uffed" +
    "\014\uffed\015\uffed\017\uffed\042\uffed\043\uffed\046\uffed\052" +
    "\uffed\054\uffed\057\uffed\061\uffed\062\uffed\001\002\000\024" +
    "\014\004\015\025\042\017\043\023\046\013\052\012\054" +
    "\006\057\026\061\022\001\002\000\004\013\076\001\002" +
    "\000\032\002\uffea\014\uffea\015\uffea\017\uffea\042\uffea\043" +
    "\uffea\046\uffea\052\uffea\054\uffea\057\uffea\061\uffea\062\uffea" +
    "\001\002\000\004\017\100\001\002\000\032\002\uffec\014" +
    "\uffec\015\uffec\017\uffec\042\uffec\043\uffec\046\uffec\052\uffec" +
    "\054\uffec\057\uffec\061\uffec\062\uffec\001\002\000\004\016" +
    "\102\001\002\000\004\013\103\001\002\000\006\013\103" +
    "\017\uffcf\001\002\000\004\017\105\001\002\000\004\016" +
    "\106\001\002\000\024\014\004\015\025\042\017\043\023" +
    "\046\013\052\012\054\006\057\026\061\022\001\002\000" +
    "\004\062\110\001\002\000\010\012\035\013\034\014\037" +
    "\001\002\000\004\017\112\001\002\000\032\002\uffd0\014" +
    "\uffd0\015\uffd0\017\uffd0\042\uffd0\043\uffd0\046\uffd0\052\uffd0" +
    "\054\uffd0\057\uffd0\061\uffd0\062\uffd0\001\002\000\004\017" +
    "\uffce\001\002\000\014\007\116\012\035\013\034\014\037" +
    "\045\115\001\002\000\032\002\uffee\014\uffee\015\uffee\017" +
    "\uffee\042\uffee\043\uffee\046\uffee\052\uffee\054\uffee\057\uffee" +
    "\061\uffee\062\uffee\001\002\000\004\044\117\001\002\000" +
    "\006\012\043\014\046\001\002\000\004\006\134\001\002" +
    "\000\014\020\123\021\125\022\122\023\126\031\124\001" +
    "\002\000\006\012\043\014\046\001\002\000\006\012\043" +
    "\014\046\001\002\000\006\012\043\014\046\001\002\000" +
    "\006\012\043\014\046\001\002\000\006\012\043\014\046" +
    "\001\002\000\004\006\uffe6\001\002\000\004\006\uffe8\001" +
    "\002\000\004\006\uffe5\001\002\000\004\006\uffe9\001\002" +
    "\000\004\006\uffe7\001\002\000\032\002\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\042\uffeb\043\uffeb\046\uffeb\052\uffeb\054\uffeb" +
    "\057\uffeb\061\uffeb\062\uffeb\001\002\000\006\012\043\014" +
    "\046\001\002\000\004\017\137\001\002\000\004\016\140" +
    "\001\002\000\024\014\004\015\025\042\017\043\023\046" +
    "\013\052\012\054\006\057\026\061\022\001\002\000\004" +
    "\017\142\001\002\000\034\002\uffd8\014\uffd8\015\uffd8\017" +
    "\uffd8\042\uffd8\043\uffd8\046\uffd8\050\143\052\uffd8\054\uffd8" +
    "\057\uffd8\061\uffd8\062\uffd8\001\002\000\004\016\144\001" +
    "\002\000\024\014\004\015\025\042\017\043\023\046\013" +
    "\052\012\054\006\057\026\061\022\001\002\000\004\017" +
    "\146\001\002\000\032\002\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\042\uffd7\043\uffd7\046\uffd7\052\uffd7\054\uffd7\057\uffd7\061" +
    "\uffd7\062\uffd7\001\002\000\004\016\150\001\002\000\004" +
    "\045\151\001\002\000\004\016\162\001\002\000\006\045" +
    "\151\053\uffd4\001\002\000\004\053\154\001\002\000\004" +
    "\016\155\001\002\000\024\014\004\015\025\042\017\043" +
    "\023\046\013\052\012\054\006\057\026\061\022\001\002" +
    "\000\004\017\157\001\002\000\004\017\160\001\002\000" +
    "\032\002\uffd6\014\uffd6\015\uffd6\017\uffd6\042\uffd6\043\uffd6" +
    "\046\uffd6\052\uffd6\054\uffd6\057\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\004\053\uffd3\001\002\000\024\014\004\015\025" +
    "\042\017\043\023\046\013\052\012\054\006\057\026\061" +
    "\022\001\002\000\004\017\164\001\002\000\006\045\uffd5" +
    "\053\uffd5\001\002\000\004\002\001\001\002\000\006\012" +
    "\043\014\046\001\002\000\004\017\170\001\002\000\004" +
    "\016\171\001\002\000\024\014\004\015\025\042\017\043" +
    "\023\046\013\052\012\054\006\057\026\061\022\001\002" +
    "\000\004\017\173\001\002\000\032\002\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\042\uffd2\043\uffd2\046\uffd2\052\uffd2\054\uffd2" +
    "\057\uffd2\061\uffd2\062\uffd2\001\002\000\010\002\uffff\017" +
    "\uffff\062\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\030\004\015\005\026\006\014\007\007\010" +
    "\017\011\023\012\013\014\006\025\010\026\004\027\020" +
    "\001\001\000\002\001\001\000\026\004\015\005\026\006" +
    "\014\007\007\010\017\011\023\012\013\014\006\026\004" +
    "\027\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\044\023\043\001\001\000\002" +
    "\001\001\000\004\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\015\005\026\006\014\007\007\010\017" +
    "\011\023\012\013\014\006\026\004\027\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\015\005\026\006\014" +
    "\007\007\010\017\011\023\012\013\014\006\026\004\027" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\103\001\001\000\004\021\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\015\005\026\006\014\007" +
    "\007\010\017\011\023\012\013\014\006\026\004\027\106" +
    "\001\001\000\002\001\001\000\004\017\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\117\023\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\132\001\001\000\004\023\131\001" +
    "\001\000\004\023\130\001\001\000\004\023\127\001\001" +
    "\000\004\023\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\135\023\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\015\005\026" +
    "\006\014\007\007\010\017\011\023\012\013\014\006\026" +
    "\004\027\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\015\005\026\006\014\007" +
    "\007\010\017\011\023\012\013\014\006\026\004\027\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\151\016\152\001\001\000\002\001\001" +
    "\000\006\015\151\016\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\015\005\026\006\014\007\007" +
    "\010\017\011\023\012\013\014\006\026\004\027\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\015\005\026\006\014\007" +
    "\007\010\017\011\023\012\013\014\006\026\004\027\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\166\023\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\015\005\026\006\014\007" +
    "\007\010\017\011\023\012\013\014\006\026\004\027\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static void main(String  args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
	}
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARGUMENTOS ::= ID ARGUMENTOS 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARGUMENTOS ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PROC01 ::= PROC ID LLAVEA ARGUMENTOS LLAVEC LLAVEA expr_list RETURN VALOR LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*PROC01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR01 ::= FOR LLAVEA SET01 LLAVEC LLAVEA TEST LLAVEC LLAVEA INCR ID LLAVEC LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FOR01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE01 ::= WHILE LLAVEA TEST LLAVEC LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*WHILE01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASE01 ::= CASE CASE01 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*CASE01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE01 ::= CASE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*CASE01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASE ::= AGRUPACION LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH01 ::= SWITCH ID LLAVEA CASE01 DEFAULT LLAVEA expr_list LLAVEC LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SWITCH01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF01 ::= IF LLAVEA TEST LLAVEC LLAVEA expr_list LLAVEC ELSE LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*IF01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF01 ::= IF LLAVEA TEST LLAVEC LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*IF01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEST ::= OPERAR SIMBRELACIONAL OPERAR 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*TEST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIMBRELACIONAL ::= NI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIMBRELACIONAL ::= IN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIMBRELACIONAL ::= NE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIMBRELACIONAL ::= EQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIMBRELACIONAL ::= MENORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIMBRELACIONAL ::= MAYORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SIMBRELACIONAL ::= MENOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SIMBRELACIONAL ::= MAYOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SIMBRELACIONAL ::= IGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*SIMBRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERAR ::= NUM 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OPERAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERAR ::= IDE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OPERAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACIONES ::= OPERAR PORCENTAJE OPERAR 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPERACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACIONES ::= OPERAR DIVISION OPERAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPERACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACIONES ::= OPERAR MULTIPLICACION OPERAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPERACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACIONES ::= OPERAR MENOS OPERAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPERACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACIONES ::= OPERAR MAS OPERAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPERACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PUTS01 ::= PUTS IDE ID 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*PUTS01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AGRUPACIONES ::= SET ID CORCIZQ EXPR OPERACIONES CORCDER 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AGRUPACIONES ::= PUTS LLAVEA expr_list LLAVEC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AGRUPACIONES ::= PUTS AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AGRUPACIONES ::= SET ID AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SET01 ::= SET ID VALOR 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*SET01*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= ID 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= NUM 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR ::= IDE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= PROC01 
            {
              Object RESULT = null;
		 System.out.println("SENTENCIA CORRECTA"); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= FOR01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= WHILE01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= SWITCH01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= IF01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= AGRUPACIONES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= PUTS01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= SET01 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= COMENTARIO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println(" = "+e+";"); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*expr_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*ini*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

